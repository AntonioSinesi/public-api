---
swagger: "2.0"
info:
  version: "2016-04-25T20:08:40Z"
  title: "DemoDrop"
  description: "To use this API you need to pass `x-api-key` in the header of each request, you can apply for a key <a href=\"mailto:support@demodrop.com?subject=public+api\">here</a>.<br><br>
  To perform actions on behalf of a user you need to pass a `Authorization` token in the header, you can get a Authorization token with the <a href=\"#reference/0/userslogin/post\">/users/login</a> method."
host: "api.demodrop.com"
schemes:
- "https"
produces:
  - application/json
paths:
  /users/login:
    post:
      description: "Get a Authorization token to perform actions on behalf of a user"
      produces:
      - "application/json"
      parameters:
      - name: "x-api-key"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "Login"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Token"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
  /users/{id}:
    get:
      description: "Retrieve basic information about a user"
      produces:
      - "application/json"
      parameters:
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/User"
  /users/{id}/followers:
    get:
      description: "Retrieve a list of users that follow a user"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Users"
    post:
      description: "Follow a user"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Ok"
    delete:
      description: "Unfollow a user"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Ok"
  /users/{id}/following:
    get:
      description: "Retrieve a list of users that a user is following"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Users"
  /users/{id}/tracks:
    get:
      description: "Retrieve a list of tracks a user has uploaded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Tracks"
  /tracks:
    get:
      description: "Retrieve a list of tracks"
      produces:
      - "application/json"
      parameters:
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "Filter by track type(s), To see all available genres call <a href=\"#reference/0/userslogin/post\">GET /tracks/types</a>"
        required: false
        type: "string"
        enum: ["promo", "workinprogress", "bootleg-remix", "mashup-edit", "acapella"]
      - name: "genre"
        description: "Filter by music genre(s), To see all available genres call <a href=\"#reference/0/userslogin/post\">GET /tracks/genres</a>"
        in: "query"
        required: false
        type: "string"
        enum: ["deep-house", "drum-bass", "dubstep", "electro-house", "glitch-hop", "hardcore", "hardstyle", "hip-hop", "house", "minimal", "progressive-house", "r-and-b", "tech-house", "techno", "trance", "trap-moombhaton"]
      - name: "search"
        description: "Filter by keyword(s)."
        in: "query"
        required: false
        type: "string"
      - name: "sort"
        description: "Sort the results."
        enum: ["trending", "discover", "newest", "best"]
        in: "query"
        required: false
        type: "string"
        default: "newest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Track"
  /tracks/{id}:
    get:
      description: "Retrieve basic information about a track"
      produces:
      - "application/json"
      parameters:
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Track"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
  /tracks/{id}/dislikes:
    get:
      description: "Retrieve the list of users that disliked a track"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Users"
    post:
      description: "Dislike a track"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Ok"
    delete:
      description: "Undo the disliking of a track"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Ok"
  /tracks/{id}/likes:
    get:
      description: "Retrieve a list of users that liked/supported a track"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Users"
    post:
      description: "Like a track"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Ok"
    delete:
      description: "Undo the liking of a track"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Ok"
  /tracks/{id}/plays:
    get:
      description: "Retrieve a list of users that played a track"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Users"
    post:
      description: "Register that the user played this track"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
  /waveforms/{md5hash}:
    get:
      description: "Retrieve an array of waveform points of a track"
      produces:
      - "application/json"
      parameters:
      - name: "md5hash"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Waveform"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        404:
          description: "404 response"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
definitions:
  Empty:
    type: "object"
  Meta:
    type: "object"
    required:
    - "prev"
    - "next"
    properties:
      prev:
        type: "string"
      next:
        type: "string"
    example:
      prev: "http://api.demodrop.com/tracks?size=25&page=1"
      next: "http://api.demodrop.com/tracks?size=25&page=3"
  Tracks:
    type: "object"
    required:
    - "data"
    - "meta"
    properties:
      data:
        type: "array"
        items:
          "$ref": "#/definitions/Track"
      meta:
        "$ref": "#/definitions/Meta"
  Track:
    type: "object"
    example:
      id: 12344
      name: "Firebeatz vs. Calvin Harris ft. Ayah Marar - Thinking About F*cking GO (Ivan Voltes Mashup)"
      status: "live"
      type: "mashup-edit"
      genre: "electro-house"
      duration: 230
      link: "/ivanvoltes/thinking-about-fcking-go"
      images: 
        small: "https://d2la6fe27fmy37.cloudfront.net/b36f1c6bd397b50ef8586c173b4e1fff.jpg"
        medium: "https://d2la6fe27fmy37.cloudfront.net/200x200/b36f1c6bd397b50ef8586c173b4e1fff.jpg"
        large: "https://d2la6fe27fmy37.cloudfront.net/b36f1c6bd397b50ef8586c173b4e1fff.jpg"
      created: "2013-09-29 13:45:46"
      stats: 
        plays: 117
        likes: 17
        downloads: 17
        comments: 0
      privacy: 
        listen: "public"
        download: "public"
      user: 
        id: 5581
        name: "Ivan Voltes"
        location: null
        link: null
        stats: 
          tracks: 0
          support: 0
          followers: 0
          following: 0
        images: 
          small: "https://d2la6fe27fmy37.cloudfront.net/b36f1c6bd397b50ef8586c173b4e1fff.jpg"
          medium: "https://d2la6fe27fmy37.cloudfront.net/200x200/b36f1c6bd397b50ef8586c173b4e1fff.jpg"
          large: "https://d2la6fe27fmy37.cloudfront.net/b36f1c6bd397b50ef8586c173b4e1fff.jpg"
        verified: false
      is: 
        disliked: false
        liked: false
        owner: false
        starred: false
    properties:
      id: 
        type: "integer"
        minimum: 1
      name: 
        type: "string"
      status: 
        type: "string"
      type: 
        type: "string"
      genre: 
        type: "string"
      duration: 
        type: "integer"
      link: 
        type: "string"
      images: 
        type: "object"
        properties:
          small: 
            type: "string"
          medium: 
            type: "string"
          large: 
            type: "string"
      created: 
        type: "string"
      stats: 
        type: "object"
        properties:
          plays: 
            type: "integer"
          likes:
            type: "integer"
          downloads:
            type: "integer"
          comments: 
            type: "integer"
      privacy: 
        type: "object"
        properties:
          listen: 
            type: "string"
          download: 
            type: "string"
      user: 
        "$ref": "#/definitions/User"
      is: 
        type: "object"
        properties:
          disliked: 
            type: "boolean"
          liked: 
            type: "boolean"
          owner: 
            type: "boolean"
          starred: 
            type: "boolean"
  Users:
    type: "object"
    required:
    - "data"
    - "meta"
    properties:
      data:
        type: "array"
        items:
          "$ref": "#/definitions/User"
      meta:
        "$ref": "#/definitions/Meta"
  User:
    type: "object"
    example:
      id: 123456
      name: "John Doe"
      location: "Amsterdam, Netherlands"
      stats:
        tracks: 10
        support: 4
        followers: 2452
        following: 154
      images:
        small: "https://d2la6fe27fmy37.cloudfront.net/100x100/1ebfec6b961d277b5660566886e8b977.jpg"
        medium: "https://d2la6fe27fmy37.cloudfront.net/200x200/1ebfec6b961d277b5660566886e8b977.jpg"
        large: "https://d2la6fe27fmy37.cloudfront.net/400x400/1ebfec6b961d277b5660566886e8b977.jpg"
      link: "http://demodrop.com/johndoe"
      verified: false
    required:
    - "id"
    - "name"
    - "location"
    - "stats"
    - "images"
    - "link"
    - "verified"
    properties:
      id:
        type: "integer"
        minimum: 1
      name:
        type: "string"
      location:
        type: "string"
      link:
        type: "string"
      stats:
        type: "object"
        properties:
          tracks:
            type: "integer"
          supports:
            type: "integer"
          followers:
            type: "integer"
          following:
            type: "integer"
      images:
        type: "object"
        properties:
          small:
            type: "string"
          large:
            type: "string"
          medium:
            type: "string"
      verified:
        type: "boolean"
  Error:
    type: "object"
    required:
    - "code"
    - "message"
    - "title"
    properties:
      code:
        type: "string"
      title:
        type: "string"
      message:
        type: "string"
  Ok:
    type: "object"
    required:
    - "acknoledged"
    properties:
      acknoledged:
        type: "boolean"
  Token:
    type: "object"
    required:
    - "token"
    properties:
      token:
        type: "string"
  Waveform:
    type: "object"
    required:
    - "points"
    properties:
      token:
        type: "string"
      points:
        type: "array"
        items:
          type: "integer"
  Login:
    type: "object"
    required:
    - "password"
    - "username"
    properties:
      username:
        type: "string"
      password:
        type: "string"